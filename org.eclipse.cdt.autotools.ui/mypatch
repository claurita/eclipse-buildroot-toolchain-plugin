diff --git a/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/AutotoolsBuildWizard.java b/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/AutotoolsBuildWizard.java
index 60de20c..f123299 100644
--- a/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/AutotoolsBuildWizard.java
+++ b/build/org.eclipse.cdt.autotools.ui/src/org/eclipse/cdt/internal/autotools/ui/wizards/AutotoolsBuildWizard.java
@@ -13,6 +13,7 @@ package org.eclipse.cdt.internal.autotools.ui.wizards;
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.SortedMap;
 
@@ -20,9 +21,12 @@ import org.eclipse.cdt.managedbuilder.buildproperties.IBuildPropertyManager;
 import org.eclipse.cdt.managedbuilder.buildproperties.IBuildPropertyType;
 import org.eclipse.cdt.managedbuilder.buildproperties.IBuildPropertyValue;
 import org.eclipse.cdt.managedbuilder.core.BuildListComparator;
+import org.eclipse.cdt.managedbuilder.core.IConfiguration;
 import org.eclipse.cdt.managedbuilder.core.IProjectType;
 import org.eclipse.cdt.managedbuilder.core.IToolChain;
 import org.eclipse.cdt.managedbuilder.core.ManagedBuildManager;
+import org.eclipse.cdt.managedbuilder.internal.core.Configuration;
+import org.eclipse.cdt.managedbuilder.internal.core.ProjectType;
 import org.eclipse.cdt.managedbuilder.ui.wizards.AbstractCWizard;
 import org.eclipse.cdt.managedbuilder.ui.wizards.MBSWizardHandler;
 import org.eclipse.cdt.ui.newui.CDTPrefUtil;
@@ -33,35 +37,45 @@ import org.eclipse.jface.wizard.IWizard;
  *
  */
 public class AutotoolsBuildWizard extends AbstractCWizard {
-	public static final String OTHERS_LABEL = AutotoolsWizardMessages.getResourceString("AutotoolsBuildWizard.1"); //$NON-NLS-1$
+	public static final String OTHERS_LABEL = AutotoolsWizardMessages
+			.getResourceString("AutotoolsBuildWizard.1"); //$NON-NLS-1$
 	public static final String AUTOTOOLS_PROJECTTYPE_ID = "org.eclipse.linuxtools.cdt.autotools.core.projectType"; //$NON-NLS-1$
-	
+
 	/**
 	 * @since 5.1
 	 */
-	public static final String EMPTY_PROJECT = AutotoolsWizardMessages.getResourceString("AutotoolsBuildWizard.2"); //$NON-NLS-1$
+	public static final String EMPTY_PROJECT = AutotoolsWizardMessages
+			.getResourceString("AutotoolsBuildWizard.2"); //$NON-NLS-1$
 	public static final String AUTOTOOLS_TOOLCHAIN_ID = "org.eclipse.linuxtools.cdt.autotools.core.toolChain"; //$NON-NLS-1$
-	
+
+	public Map<IProjectType, AutotoolsBuildWizardHandler> autotoolsProjectTypes = new HashMap<IProjectType, AutotoolsBuildWizardHandler>();
+	private AutotoolsBuildWizardHandler autotoolsBuildWizardHandler;
+	private IProjectType autotoolsProjectType;
+
 	/**
-	 * Creates and returns an array of items to be displayed 
+	 * Creates and returns an array of items to be displayed
 	 */
 	public EntryDescriptor[] createItems(boolean supportedOnly, IWizard wizard) {
-		IBuildPropertyManager bpm = ManagedBuildManager.getBuildPropertyManager();
+		IBuildPropertyManager bpm = ManagedBuildManager
+				.getBuildPropertyManager();
 		IBuildPropertyType bpt = bpm.getPropertyType(MBSWizardHandler.ARTIFACT);
 		IBuildPropertyValue[] vs = bpt.getSupportedValues();
 		Arrays.sort(vs, BuildListComparator.getInstance());
 		ArrayList<EntryDescriptor> items = new ArrayList<EntryDescriptor>();
 
-		// look for project types that have a toolchain based on the Autotools toolchain
+		// look for project types that have a toolchain based on the Autotools
+		// toolchain
 		// and if so, add an entry for the project type.
 		// Fix for bug#374026
 		EntryDescriptor oldsRoot = null;
-		SortedMap<String, IProjectType> sm = ManagedBuildManager.getExtensionProjectTypeMap();
+		SortedMap<String, IProjectType> sm = ManagedBuildManager
+				.getExtensionProjectTypeMap();
 		for (Map.Entry<String, IProjectType> e : sm.entrySet()) {
 			IProjectType pt = e.getValue();
-			AutotoolsBuildWizardHandler h = new AutotoolsBuildWizardHandler(pt, parent, wizard);
+			AutotoolsBuildWizardHandler h = new AutotoolsBuildWizardHandler(pt,
+					parent, wizard);
 			IToolChain[] tcs = ManagedBuildManager.getExtensionToolChains(pt);
-			for(int i = 0; i < tcs.length; i++){
+			for (int i = 0; i < tcs.length; i++) {
 				IToolChain t = tcs[i];
 
 				IToolChain parent = t;
@@ -72,7 +86,7 @@ public class AutotoolsBuildWizard extends AbstractCWizard {
 				if (!parent.getId().equals(AUTOTOOLS_TOOLCHAIN_ID))
 					continue;
 
-				if(t.isSystemObject()) 
+				if (t.isSystemObject())
 					continue;
 				if (!isValid(t, supportedOnly, wizard))
 					continue;
@@ -80,21 +94,50 @@ public class AutotoolsBuildWizard extends AbstractCWizard {
 				h.addTc(t);
 			}
 
-			String pId = null;
-			if (CDTPrefUtil.getBool(CDTPrefUtil.KEY_OTHERS)) {
-				if (oldsRoot == null) {
-					oldsRoot = new EntryDescriptor(OTHERS_LABEL, null, OTHERS_LABEL, true, null, null);
-					items.add(oldsRoot);
+			if (h.getToolChainsCount() > 0) {
+				if (AUTOTOOLS_PROJECTTYPE_ID.equals(pt.getId())) {
+					autotoolsBuildWizardHandler = h;
+					autotoolsProjectType = pt;
+				} else {
+					autotoolsProjectTypes.put(pt, h);
 				}
-				pId = oldsRoot.getId();
-			} else { // do not group to <Others>
-			pId = null;
 			}
+		}
+
+		for (IProjectType projectType : autotoolsProjectTypes.keySet()) {
+			AutotoolsBuildWizardHandler h = autotoolsProjectTypes
+					.get(projectType);
+			for (IToolChain tc : h.getToolChains().values()) {
+				IConfiguration tcConfig = null;
+				for (IConfiguration config : projectType.getConfigurations()) {
+					if (tc.equals(config.getToolChain()))
+						tcConfig = config;
+				}
+				if (autotoolsProjectType instanceof ProjectType
+						&& tcConfig instanceof Configuration)
+					((ProjectType) autotoolsProjectType)
+							.addConfiguration((Configuration) tcConfig);
+				autotoolsBuildWizardHandler.addTc(tc);
+			}
+		}
 
-			if (h.getToolChainsCount() > 0)
-				items.add(new EntryDescriptor(pt.getId(), pId, pt.getName(), true, h, null));
+		String pId = null;
+		if (CDTPrefUtil.getBool(CDTPrefUtil.KEY_OTHERS)) {
+			if (oldsRoot == null) {
+				oldsRoot = new EntryDescriptor(OTHERS_LABEL, null,
+						OTHERS_LABEL, true, null, null);
+				items.add(oldsRoot);
+			}
+			pId = oldsRoot.getId();
+		} else { // do not group to <Others>
+			pId = null;
 		}
 
-		return (EntryDescriptor[])items.toArray(new EntryDescriptor[items.size()]);
+		items.add(new EntryDescriptor(autotoolsProjectType.getId(), pId,
+				autotoolsProjectType.getName(), true,
+				autotoolsBuildWizardHandler, null));
+
+		return (EntryDescriptor[]) items.toArray(new EntryDescriptor[items
+				.size()]);
 	}
 }
